service: cpx
frameworkVersion: '3'
useDotenv: true
provider:
  name: aws
  runtime: nodejs18.x
  role: ${env:SLS_LAMBA_ROLE}
  stage: ${env:TARGET_ENV_NAME}
  region: ${env:TARGET_REGION}
  api_gw_id: ${env:API_GATEWAY_ID}
  deploymentBucket:
    name: ${env:SLS_BUCKET}
  vpc:
    securityGroupIds:
      - ${env:SLS_VPN_SECURITY_GROUP}
    subnetIds:
      - ${env:SLS_SUBNET_1}
      - ${env:SLS_SUBNET_2}
  iamRoleStatements:
    - Effect: Allow
      Action: lambda:InvokeFunction
      Resource:
        - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cpx-${self:provider.stage}-processMessage'
        - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cpx-${self:provider.stage}-getMessage'
        - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cpx-${self:provider.stage}-getMessagesAtom'
      Principal: apigateway.amazonaws.com
      SourceArn:
        - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${env:API_GATEWAY_ID}/*/POST/message'
        - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${env:API_GATEWAY_ID}/*/GET/message/*'
        - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${env:API_GATEWAY_ID}/*/GET/messages.atom'

package:
 exclude:
   - test
functions:
  processMessage:
    handler: lib/functions/processMessage.processMessage
    timeout: 30
  getMessagesAtom:
    handler: lib/functions/getMessagesAtom.getMessagesAtom
    timeout: 60
  getMessage:
    handler: lib/functions/getMessage.getMessage
    timeout: 12
  archiveMessages:
    handler: lib/functions/archiveMessages.archiveMessages
    timeout: 240
    events:
      - schedule:
          rate: cron(0 2 * * ? *)
          enabled: true
